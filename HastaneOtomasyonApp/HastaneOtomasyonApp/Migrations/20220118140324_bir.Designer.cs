// <auto-generated />
using HastaneOtomasyonApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HastaneOtomasyonApp.Migrations
{
    [DbContext(typeof(HastaneOtomasyonDBContext))]
    [Migration("20220118140324_bir")]
    partial class bir
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HastaneOtomasyonApp.Models.Birim", b =>
                {
                    b.Property<int>("BirimID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BirimID"), 1L, 1);

                    b.Property<string>("BirimAdı")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("BirimID");

                    b.ToTable("Birim");

                    b.HasData(
                        new
                        {
                            BirimID = 1,
                            BirimAdı = "Acil Servis"
                        },
                        new
                        {
                            BirimID = 2,
                            BirimAdı = "Ağız ve Diş Sağlığı"
                        },
                        new
                        {
                            BirimID = 3,
                            BirimAdı = "Beslenme Ve Diyatetik"
                        },
                        new
                        {
                            BirimID = 4,
                            BirimAdı = "Nöroşirurji"
                        },
                        new
                        {
                            BirimID = 5,
                            BirimAdı = "Çocuk Sağlığı ve Hastalıkları"
                        },
                        new
                        {
                            BirimID = 6,
                            BirimAdı = "Dahiliye"
                        },
                        new
                        {
                            BirimID = 7,
                            BirimAdı = "Dermatoloji"
                        },
                        new
                        {
                            BirimID = 8,
                            BirimAdı = "Estetik ve Plastik Cerrahi"
                        },
                        new
                        {
                            BirimID = 9,
                            BirimAdı = "Fizik Tedavi ve Rehabilitasyon"
                        },
                        new
                        {
                            BirimID = 10,
                            BirimAdı = "Genel Cerrahi"
                        },
                        new
                        {
                            BirimID = 11,
                            BirimAdı = "Göğüs Hastaıkları"
                        },
                        new
                        {
                            BirimID = 12,
                            BirimAdı = "Kadın Hastalıkları ve Doğum"
                        },
                        new
                        {
                            BirimID = 13,
                            BirimAdı = "Kulak Burun Boğaz Hastalıkları"
                        },
                        new
                        {
                            BirimID = 14,
                            BirimAdı = "Kalp ve Damar Cerrahisi"
                        },
                        new
                        {
                            BirimID = 15,
                            BirimAdı = "Ortopedi"
                        });
                });

            modelBuilder.Entity("HastaneOtomasyonApp.Models.Doktor", b =>
                {
                    b.Property<int>("DoktorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoktorID"), 1L, 1);

                    b.Property<string>("DoktorTamAdı")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MobilNO")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("TCNO")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("DoktorID");

                    b.ToTable("Doktor");

                    b.HasData(
                        new
                        {
                            DoktorID = 1,
                            DoktorTamAdı = "Emre Tümer",
                            MobilNO = "0000000000",
                            TCNO = "11111111111"
                        },
                        new
                        {
                            DoktorID = 2,
                            DoktorTamAdı = "Levent Atahanlı",
                            MobilNO = "0000000000",
                            TCNO = "11111111111"
                        },
                        new
                        {
                            DoktorID = 3,
                            DoktorTamAdı = "Suat Birtan",
                            MobilNO = "0000000000",
                            TCNO = "11111111111"
                        },
                        new
                        {
                            DoktorID = 4,
                            DoktorTamAdı = "Ela Altındağ",
                            MobilNO = "0000000000",
                            TCNO = "11111111111"
                        },
                        new
                        {
                            DoktorID = 5,
                            DoktorTamAdı = "Zeynep Öztürk",
                            MobilNO = "0000000000",
                            TCNO = "11111111111"
                        },
                        new
                        {
                            DoktorID = 6,
                            DoktorTamAdı = "Haldun Göksun",
                            MobilNO = "0000000000",
                            TCNO = "11111111111"
                        },
                        new
                        {
                            DoktorID = 7,
                            DoktorTamAdı = "Julide Aydın",
                            MobilNO = "0000000000",
                            TCNO = "11111111111"
                        });
                });

            modelBuilder.Entity("HastaneOtomasyonApp.Models.Hasta", b =>
                {
                    b.Property<int>("HastaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HastaID"), 1L, 1);

                    b.Property<string>("HastaTamAdı")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MobilNO")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("TCNO")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("HastaID");

                    b.ToTable("Hasta");

                    b.HasData(
                        new
                        {
                            HastaID = 1,
                            HastaTamAdı = "Muhammed Yılmaz",
                            MobilNO = "0000000000",
                            TCNO = "11111111111"
                        },
                        new
                        {
                            HastaID = 2,
                            HastaTamAdı = "Selda Bağcan",
                            MobilNO = "0000000000",
                            TCNO = "11111111111"
                        },
                        new
                        {
                            HastaID = 3,
                            HastaTamAdı = "Batuhan Çelik",
                            MobilNO = "0000000000",
                            TCNO = "11111111111"
                        },
                        new
                        {
                            HastaID = 4,
                            HastaTamAdı = "Dursun Atagün",
                            MobilNO = "0000000000",
                            TCNO = "11111111111"
                        },
                        new
                        {
                            HastaID = 5,
                            HastaTamAdı = "Koray Avcı",
                            MobilNO = "0000000000",
                            TCNO = "11111111111"
                        },
                        new
                        {
                            HastaID = 6,
                            HastaTamAdı = "Musa Eroğlu",
                            MobilNO = "0000000000",
                            TCNO = "11111111111"
                        });
                });

            modelBuilder.Entity("HastaneOtomasyonApp.Models.Laboratuvar", b =>
                {
                    b.Property<int>("LaboratuvarID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LaboratuvarID"), 1L, 1);

                    b.Property<int>("HastaID")
                        .HasColumnType("int");

                    b.Property<int>("SonucID")
                        .HasColumnType("int");

                    b.HasKey("LaboratuvarID");

                    b.HasIndex("HastaID");

                    b.HasIndex("SonucID");

                    b.ToTable("Laboratuvar");
                });

            modelBuilder.Entity("HastaneOtomasyonApp.Models.Muayene", b =>
                {
                    b.Property<int>("MuayeneID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MuayeneID"), 1L, 1);

                    b.Property<int>("BirimID")
                        .HasColumnType("int");

                    b.Property<int>("DoktorID")
                        .HasColumnType("int");

                    b.Property<string>("HastaGeçmişi")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("HastaID")
                        .HasColumnType("int");

                    b.Property<string>("HastaTedavi")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("HastaTeşhis")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Yazılanİlaçlar")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ÖdemeTipiID")
                        .HasColumnType("int");

                    b.HasKey("MuayeneID");

                    b.HasIndex("BirimID");

                    b.HasIndex("DoktorID");

                    b.HasIndex("HastaID");

                    b.HasIndex("ÖdemeTipiID");

                    b.ToTable("Muayene");
                });

            modelBuilder.Entity("HastaneOtomasyonApp.Models.ÖdemeTipi", b =>
                {
                    b.Property<int>("ÖdemeTipiID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ÖdemeTipiID"), 1L, 1);

                    b.Property<string>("ÖdemeTipiAdı")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("ÖdemeTipiID");

                    b.ToTable("ÖdemeTipi");

                    b.HasData(
                        new
                        {
                            ÖdemeTipiID = 1,
                            ÖdemeTipiAdı = "Peşin Ödeme"
                        },
                        new
                        {
                            ÖdemeTipiID = 2,
                            ÖdemeTipiAdı = "Kredi Kartı İle"
                        },
                        new
                        {
                            ÖdemeTipiID = 3,
                            ÖdemeTipiAdı = "SGK"
                        },
                        new
                        {
                            ÖdemeTipiID = 4,
                            ÖdemeTipiAdı = "Özel Sigorta"
                        });
                });

            modelBuilder.Entity("HastaneOtomasyonApp.Models.Sonuc", b =>
                {
                    b.Property<int>("SonucID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SonucID"), 1L, 1);

                    b.Property<string>("SonucAd")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("SonucID");

                    b.ToTable("Sonuc");
                });

            modelBuilder.Entity("HastaneOtomasyonApp.Models.Laboratuvar", b =>
                {
                    b.HasOne("HastaneOtomasyonApp.Models.Hasta", "Hasta")
                        .WithMany()
                        .HasForeignKey("HastaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HastaneOtomasyonApp.Models.Sonuc", "Sonuc")
                        .WithMany()
                        .HasForeignKey("SonucID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hasta");

                    b.Navigation("Sonuc");
                });

            modelBuilder.Entity("HastaneOtomasyonApp.Models.Muayene", b =>
                {
                    b.HasOne("HastaneOtomasyonApp.Models.Birim", "Birim")
                        .WithMany()
                        .HasForeignKey("BirimID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HastaneOtomasyonApp.Models.Doktor", "Doktor")
                        .WithMany()
                        .HasForeignKey("DoktorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HastaneOtomasyonApp.Models.Hasta", "Hasta")
                        .WithMany()
                        .HasForeignKey("HastaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HastaneOtomasyonApp.Models.ÖdemeTipi", "ÖdemeTipi")
                        .WithMany()
                        .HasForeignKey("ÖdemeTipiID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Birim");

                    b.Navigation("Doktor");

                    b.Navigation("Hasta");

                    b.Navigation("ÖdemeTipi");
                });
#pragma warning restore 612, 618
        }
    }
}
